name: Step 3 # Connecting to GitHub

on:
  issue_comment:
    types: [created, edited]

permissions:
  contents: read
  actions: write
  issues: write

env:
  # Keywords required in the issue comment to allow this workflow to run
  REQUIRED_ISSUE_COMMENT_KEYWORDS: "@professortocat,https://github.com/apps"
  STEP_4_FILE: ".github/steps/4-customizing-our-extension.md"

jobs:
  required_issue_comment_keywords:
    name: Check issue comment text for required keywords
    runs-on: ubuntu-latest

    steps:
      - name: Stop early if missing the expected keywords
        run: |
          required_keywords=(${REQUIRED_ISSUE_COMMENT_KEYWORDS//,/ })
          for keyword in "${required_keywords[@]}"; do
          if [[ ! "$COMMENT_BODY" =~ $keyword ]]; then
            exit 1
          fi
          done
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}

  find_exercise:
    name: Find exercise by issue title
    runs-on: ubuntu-latest

    outputs:
      issue-url: ${{ steps.get-issue-url.outputs.ISSUE_URL }}

    steps:
      - id: get-issue-url
        run: |
          # Get the issue url from the event or search for it.
          if [ -n "${{ github.event.issue }}" ]; then
            issue_url="${{ github.event.issue.html_url }}"
          else
            issue_url=$(gh issue list --repo $REPO --search "in:title Exercise:" --json url,title --jq '.[].url')
          fi

          # Save to output
          echo "ISSUE_URL=$issue_url" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}

  check_step_work:
    name: Check step work
    runs-on: ubuntu-latest
    needs: [required_issue_comment_keywords, find_exercise]
    env:
      ISSUE_URL: ${{ needs.find_exercise.outputs.issue-url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get response templates
        uses: actions/checkout@v4
        with:
          repository: skills/response-templates
          path: skills-response-templates

      # START: Check practical exercise

      - name: Check gitub app url is valid
        run: |
          # Get the GitHub App url from the comment body
          url_regex="https://github.com/apps/[^[:space:]]*"
          app_url=$(echo $ISSUE_COMMENT_BODY | grep -oP "$url_regex" | head -n 1)

          # Ping the url and get the content
          echo "Checking GitHub App exists at: $app_url"
          resp_code=$(curl -s -o /dev/null -w "%{http_code}" $app_url)
          echo "Response Code: $resp_code"

          # If the GitHub App url is not valid, it wasn't created. Comment on the issue and exit
          if [ "$resp_code" -eq 200 ]; then
            echo "GitHub App confirmed existing"
          else
            echo "Codespace is not running. Response Code: $resp_code"
            gh issue comment "$ISSUE_URL" \
            --body "I can't seem to find your GitHub App. Please verify the app url by visiting it in a web browser, then try asking to check again." \
            --edit-last
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_COMMENT_BODY: ${{ github.event.comment.body }}

      # END: Check practical exercise

      - name: Build message - step finished
        id: build-message-step-finish
        uses: skills/action-text-variables@v1
        with:
          template-file: skills-response-templates/step-feedback/step-finished-prepare-next-step.md
          template-vars: |
            next_step_number=4

      - name: Update comment - step finished
        run: |
          gh issue comment "$ISSUE_URL" \
            --body "$COMMENT_BODY" \
            --edit-last
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMENT_BODY: ${{ steps.build-message-step-finish.outputs.updated-text }}

  post_step_4_content:
    name: Post step 4 content
    needs: [find_exercise, check_step_work]
    runs-on: ubuntu-latest
    env:
      ISSUE_URL: ${{ needs.find_exercise.outputs.issue-url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get response templates
        uses: actions/checkout@v4
        with:
          repository: skills/response-templates
          path: skills-response-templates

      - name: Create lowercase version of login
        if: true
        run: |
          login_lowercase=$(echo "${{ github.actor }}" | tr '[:upper:]' '[:lower:]')
          echo "login_lowercase=$login_lowercase" >> $GITHUB_ENV

      - name: Build comment - add step content
        id: build-comment
        uses: skills/action-text-variables@v1
        with:
          template-file: ${{ env.STEP_4_FILE }}
          template-vars: |
            login_lowercase=${{ env.login_lowercase }}

      - name: Create comment - add step content
        run: |
          gh issue comment "$ISSUE_URL" \
            --body "$COMMENT_BODY"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMENT_BODY: ${{ steps.build-comment.outputs.updated-text }}

      - name: Create comment - watching for progress
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file skills-response-templates/step-feedback/watching-for-progress.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Disable current workflow and enable next one
        run: |
          gh workflow disable "Step 3"
          gh workflow enable "Step 4"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
